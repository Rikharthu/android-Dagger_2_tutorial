package com.twistedeqations.dagger2tutorial;

import android.app.Activity;
import android.app.Application;

import com.squareup.picasso.Picasso;
import com.twistedeqations.dagger2tutorial.components.DaggerGithubApplicationComponent;
import com.twistedeqations.dagger2tutorial.components.GithubApplicationComponent;
import com.twistedeqations.dagger2tutorial.modules.ContextModule;
import com.twistedeqations.dagger2tutorial.modules.GithubServiceModule;
import com.twistedeqations.dagger2tutorial.modules.NetworkModule;
import com.twistedeqations.dagger2tutorial.modules.PicassoModule;
import com.twistedeqations.dagger2tutorial.network.GithubService;

import timber.log.Timber;


public class GithubApplication extends Application {

    public static GithubApplication get(Activity activity) {
        return (GithubApplication) activity.getApplication();
    }

    private GithubService githubService;
    private Picasso picasso;

    @Override
    public void onCreate() {
        super.onCreate();

        // Prepare timber and OkHttp's HttpLoggingInterceptor to log urls and etc
        Timber.plant(new Timber.DebugTree());

        // Use Dagger approach

        // Instantiate GithubApplicationComponent instance, generated by dagger
        /*
        GithubApplicationComponent component = DaggerGithubApplicationComponent.builder()
                .contextModule(new ContextModule(this)) // create instance of the modules
                .githubServiceModule(new GithubServiceModule())
                .networkModule(new NetworkModule())
                .picassoModule(new PicassoModule())
                .build();
        */
        // However, only modules that have constructor arguments must be specified during build
        // That's how we specify context for ContextModule
        // see the generated DaggerGithubApplicationComponent's build() method for more info
        GithubApplicationComponent component = DaggerGithubApplicationComponent.builder()
                .contextModule(new ContextModule(this))
                .build();

        // access these methods
        githubService = component.getGithubService();
        picasso = component.getPicasso();
    }

    public GithubService getGithubService() {
        return githubService;
    }

    public Picasso getPicasso() {
        return picasso;
    }
}